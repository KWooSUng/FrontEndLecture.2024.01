/*  repl방식
read/eval/print/loop 입력/평가/출력/반복
코드를 입력하면 결과가 바로 출력되는 과정을 반복하는 것 */
====================================================================
/* ㅁ=, ==의 차이
= : 은 수학적으로는 같다지만 코딩에서는 같다가 아닌 넣는다는 개념
== : 이 코딩에서 같다는 의미이다
***변수는 상자다. */
====================================================================
/* ㅁ조건문
-호이스팅 : 변수나 함수를 스코프 상단으로 끌어올리는 것(버그원인이 될 수 있다.) */
====================================================================
//함수 : 수학에서의 정의는 들어오는값 함수를 거쳐서 아웃풋 결과로 나온다
// 예제)코드
function 함수명(매개변수) {
    let temp = 2*x +3    // (2*x +3이라는 변수를 temp에 저장)
    return temp //(결과를 돌려주다) 
}

my(1)           //실행

function 함수명(x, y) {
    let temp = x+y    // (x+y를 temp에 임시 저장)
    return temp //(결과를 돌려주다)
}
함수명(1, 2)  
/* (x랑 y에 1,2를 넣으면)   
실행결과로 1+2 = 3이라는 값이 출력

코딩에서는 입력과 출력값이 없는 함수도 있다 */
// 예제2) 입/출력이 없는 함수
function fly() {
    openWings();
    while (true) {
        moveWings();
    }
} //코드를 묶어주기 위해 사용
// 함수는 = 마법 = 코드르 묶는다
/* 함수는 항상 정의를 하고 사용한다 */
function add(x,y) {
    let temp = (x + y);
    return tmep
}
console.log(1,3)
=================================================================
//조건문 
// 1. 돈이 5000원 이상 있으면 택시를 탄다.
if(money > 5000) { //만약에 (가정)
    rideTaxi();  // 결과
}

// 2. 돈이 5000원 이상 있으면 택시를 타고, 없으면 걸어간다.
if(money > 5000) { 
    rideTaxi(); 
    //참일때의 조건
}else {
    walk();
    //거짓일때의 조건    
}

//3. 돈이 있으면 택시를 탄다.
if(money > 5000) { 
    console.log("택시를 탄다."); 
    //5000원을 만족하면 실행 아니면 else if
}else if(money > 2000) {
    rideBus();
    //2000원을 만족하면 실행 아니면 else
}else {
    console.log("걸어간다");
    //끝
}
// else if로 무한정 조건을 늘리기가 가능하다.
=================================================================
//반복문
// 1.나무를 10번 찍는다.
for(let i = 0; i < 10; i++) {
    console.log("나무 찍기" " i");
}
    
    

















